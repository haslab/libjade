param int KECCAK_ROUNDS=24;

inline fn KECCAK1600_RC_spec() -> stack u64[24] {
  stack u64[24] rc;
  rc[0] = 0x0000000000000001;
  rc[1] = 0x0000000000008082;
  rc[2] = 0x800000000000808a;
  rc[3] = 0x8000000080008000;
  rc[4] = 0x000000000000808b;
  rc[5] = 0x0000000080000001;
  rc[6] = 0x8000000080008081;
  rc[7] = 0x8000000000008009;
  rc[8] = 0x000000000000008a;
  rc[9] = 0x0000000000000088;
  rc[10] = 0x0000000080008009;
  rc[11] = 0x000000008000000a;
  rc[12] = 0x000000008000808b;
  rc[13] = 0x800000000000008b;
  rc[14] = 0x8000000000008089;
  rc[15] = 0x8000000000008003;
  rc[16] = 0x8000000000008002;
  rc[17] = 0x8000000000000080;
  rc[18] = 0x000000000000800a;
  rc[19] = 0x800000008000000a;
  rc[20] = 0x8000000080008081;
  rc[21] = 0x8000000000008080;
  rc[22] = 0x0000000080000001;
  rc[23] = 0x8000000080008008;
  return rc;
}

inline fn __index_spec(inline int x y) -> inline int
{
  inline int r;
  r = (x % 5) + 5 * (y % 5);
  return r;
}


inline fn __keccak_rho_offsets_spec(inline int i) -> inline int
{
  inline int r x y z t;

  r = 0;
  x = 1;
  y = 0;

  for t = 0 to 24 {
    if (i == x + 5 * y) {
      r = ((t + 1) * (t + 2) / 2) % 64;
    }
    z = (2 * x + 3 * y) % 5;
    x = y;
    y = z;
  }

  return r;
}


inline fn __rhotates_spec(inline int x y) -> inline int
{
  inline int i r;
  i = __index_spec(x, y);
  r = __keccak_rho_offsets_spec(i);
  return r;
}


inline fn __theta_spec(stack u64[25] a) -> stack u64[25]
{
  inline int x y;
  reg u64[5] c d;

  for x = 0 to 5 {
    c[x] = 0;
    for y = 0 to 5 {
      c[x] ^= a[x + 5 * y];
    }
  }

  for x = 0 to 5 {
    d[x] = c[(x + 1) % 5];
    _, _, d[x] = #ROL_64(d[x], 1);
    d[x] ^= c[(x + 4) % 5];
  }

  for x = 0 to 5 {
    for y = 0 to 5 {
      a[x + 5 * y] ^= d[x];
    }
  }

  return a;
}


inline fn __rho_spec(stack u64[25] a) -> stack u64[25]
{
  inline int x y i z;

  for x = 0 to 5 {
    for y = 0 to 5 {
      i = __index_spec(x, y);
      z = __keccak_rho_offsets_spec(i);
      _, _, a[i] = #ROL_64(a[i], z);
    }
  }

  return a;
}


inline fn __pi_spec(stack u64[25] a) -> stack u64[25]
{
  inline int x y i;
  stack u64[25] b;
  reg u64 t;

  for i = 0 to 25
  { t = a[i]; b[i] = t; }

  for x = 0 to 5 {
    for y = 0 to 5 {
      t = b[x + 5 * y];
      i = __index_spec(y, 2 * x + 3 * y);
      a[i] = t;
    }
  }
  return a;
}


inline fn __chi_spec(stack u64[25] a) -> stack u64[25]
{
  inline int x y i;
  reg u64[5] c;

  for y = 0 to 5 {
    for x = 0 to 5 {
      i = __index_spec(x + 1, y);
      c[x] = a[i];
      c[x] = !c[x];
      i = __index_spec(x + 2, y);
      c[x] &= a[i];
      i = __index_spec(x, y);
      c[x] ^= a[i];
    }
    for x = 0 to 5 {
      a[x + 5 * y] = c[x];
    }
  }
  return a;
}


inline fn __iota_spec(stack u64[25] a, reg u64 c) -> stack u64[25]
{
  a[0] ^= c;
  return a;
}


inline fn __keccakP1600_round_spec(stack u64[25] state, reg u64 c) -> stack u64[25]
{
  state = __theta_spec(state);
  state = __rho_spec(state);
  state = __pi_spec(state);
  state = __chi_spec(state);
  state = __iota_spec(state, c);
  return state;
}


inline fn __keccakf1600_spec(stack u64[25] state) -> stack u64[25]
{
  reg u64 round RC;
  reg ptr u64[24] kRCp;

  kRCp = KECCAK1600_RC_spec();
  round = 0;
  while(round < 24)
  {
    RC = kRCp[(int) round];
    state = __keccakP1600_round_spec(state, RC);
    round += 1;
  }

  return state;
}


